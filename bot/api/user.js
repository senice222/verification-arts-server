import ApplicationModel from '../../models/Application.model.js';
import { Markup } from 'telegraf';
import multer from "multer";
import path, { dirname } from "path";
import fs from 'fs'
import { fileURLToPath } from "url";
import { format, parseISO, isValid, addHours, startOfDay } from 'date-fns'
import { ru } from 'date-fns/locale'
import iconv from 'iconv-lite'
import UserModel from '../../models/User.model.js';
import { extractFileName } from '../callbacks/applications/detailedApplication.js';

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)
const uploadDirectory = path.join(__dirname, '../../api/uploads')

if (!fs.existsSync(uploadDirectory)) {
    fs.mkdirSync(uploadDirectory, { recursive: true })
}

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, uploadDirectory)
    },
    filename: function (req, file, cb) {
        const fileName = iconv.decode(Buffer.from(file.originalname, 'binary'), 'utf-8')
        cb(null, fileName);
    }
})
const upload = multer({ storage: storage })

export const deleteApplication = (app, bot) => {
    app.delete("/api/application/delete/:id", async (req, res) => {
        const { id } = req.params
        const { _id } = req.body;
        try {
            const application = await ApplicationModel.findByIdAndDelete(_id)
            const user = await UserModel.findOne({ id })
            user.applications.filter(item => item !== _id)
            await user.save()
            await bot.telegram.sendMessage(id, `–ó–∞—è–≤–∫–∞ ‚Ññ${application.normalId} —É–¥–∞–ª–µ–Ω–∞.`,
                {
                    reply_markup: Markup.inlineKeyboard([
                        Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', `?start`)
                    ]).resize().reply_markup
                }
            );

            res.status(200).send('Message sent successfully');
        } catch (error) {
            console.error('Error sending message:', error);
            res.status(500).send('Failed to send message');
        }
    });
};

export const setDateToAnswer = (app, bot) => {
    app.post("/api/application/set-date/:id", async (req, res) => {
        const { id } = req.params;
        const { _id, date } = req.body;

        try {
            const application = await ApplicationModel.findById(_id);
            if (!application) {
                return res.status(404).json("Application not found");
            }

            let normalizedDate = parseISO(date);

            if (!isNaN(normalizedDate)) {
                normalizedDate = startOfDay(addHours(normalizedDate, 3));
            } else {
                return res.status(400).json("Invalid date format");
            }

            const formattedDate = format(normalizedDate, 'dd.MM.yyyy', { locale: ru });
            application.dateAnswer = formattedDate;
            application.status = "–í —Ä–∞–±–æ—Ç–µ";
            application.history.push({ label: `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∞: –¥–æ ${formattedDate}` });
            await application.save();

            await bot.telegram.sendMessage(id, `<b>üïì –ó–∞—è–≤–∫–∞ ‚Ññ${application.normalId}</b> –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –¥–æ ${formattedDate}.`, {
                reply_markup: Markup.inlineKeyboard([
                    Markup.button.callback('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ', `?detailedApp_${application._id}`)
                ]).resize().reply_markup,
                parse_mode: "HTML"
            });

            res.status(200).send('Message sent successfully');
        } catch (error) {
            console.error('Error sending message:', error);
            res.status(500).send('Failed to send message');
        }
    })
}

export const changeStatus = (app, bot) => {
    app.put("/api/application/change-status/:id", async (req, res) => {
        const { id } = req.params
        const { _id, status } = req.body;
        try {
            const application = await ApplicationModel.findById(_id)
            if (!application) {
                return res.status(404).json("Application not found")
            }
            application.status = status
            application.history.push({ label: `–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${status}` })
            await application.save()

            await bot.telegram.sendMessage(id, `–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ‚Ññ${application.normalId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${status}.`,
                {
                    reply_markup: Markup.inlineKeyboard([
                        Markup.button.callback('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ', `?detailedApp_${application._id}`)
                    ]).resize().reply_markup
                }
            );

            res.status(200).send('Message sent successfully');
        } catch (error) {
            console.error('Error sending message:', error);
            res.status(500).send('Failed to send message');
        }
    });
};

export const closeApplication = (app, bot) => {
    app.put("/api/application/close-status/:id", async (req, res) => {
        const { id } = req.params
        const { _id, comments } = req.body;
        try {
            const application = await ApplicationModel.findById(_id)
            if (!application) {
                return res.status(404).json("Application not found")
            }
            application.status = "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            application.history.push({ label: `–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞` })
            await application.save()
            const messageText = `–ó–∞—è–≤–∫–∞ ‚Ññ${application.normalId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.${comments ? ` –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n${comments}` : ''}`;

            await bot.telegram.sendMessage(id, messageText,
                {
                    reply_markup: Markup.inlineKeyboard([
                        Markup.button.callback('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ', `?detailedApp_${application._id}`)
                    ]).resize().reply_markup
                }
            );

            res.status(200).send('Message sent successfully');
        } catch (error) {
            console.error('Error sending message:', error);
            res.status(500).send('Failed to send message');
        }
    });
};


export const reviewedApplication = (app, bot) => {
    app.put("/api/application/reviewed/:id", upload.array('files'), async (req, res) => {
        const { id } = req.params
        const { _id, status, comments, admin } = req.body;
        const files = req.files.map(file => file.filename);

        try {
            const updateData = { status, fileAnswer: files };
            if (comments) {
                updateData.comments = comments;
            }
            const application = await ApplicationModel.findByIdAndUpdate(
                _id,
                { $set: updateData },
                { new: true }
            );
            if (!application) {
                return res.status(404).json({ message: 'Application not found' });
            }
            if (comments) {
                const historyEntry = { label: comments, admin, type: "comment" };
                if (files.length > 0) {
                    historyEntry.fileUrls = files;
                }
                application.history.push(historyEntry);
            }
            application.status = "–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞"
            await application.save();
            const messageText = `‚úÖ–ó–∞—è–≤–∫–∞ ‚Ññ${application.normalId} ${status}!${status === '–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞' ? '\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç–≤–µ—Ç' : ''}`;

            await bot.telegram.sendMessage(id, messageText,
                {
                    reply_markup: Markup.inlineKeyboard([
                        Markup.button.callback('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ', `?detailedApp_${application._id}`)
                    ]).resize().reply_markup
                }
            );

            res.status(200).send('Message sent successfully');
        } catch (error) {
            console.error('Error sending message:', error);
            res.status(500).send('Failed to send message');
        }
    });
};


export const getClarifications = (app, bot) => {
    app.post("/api/application/get-clarifications/:id", upload.array('files'), async (req, res) => {
        const { id } = req.params;
        const { _id, text, admin } = req.body;
        const files = req.files || [];

        try {
            const application = await ApplicationModel.findById(_id);
            if (!application) {
                return res.status(404).json("Application not found");
            }

            const fileUrls = files.map(file => `https://consultantnlgpanel.ru/api/uploads/${file.filename}`);


            application.status = "–ù–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–∏";
            application.history.push({ label: "–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ" });
            application.history.push({ label: "–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ —Å–º–µ–Ω–µ–Ω –ù–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–∏" });
            if (text || fileUrls) {
                const historyEntry = { label: text, admin, type: "comment" };
                if (fileUrls.length >= 0) {
                    historyEntry.fileUrls = fileUrls;
                }
                application.history.push(historyEntry);
            }
            await application.save();

            let messageText = `–ü–æ –∑–∞—è–≤–∫–µ ‚Ññ${application.normalId} —Ç—Ä–µ–±—É—é—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:\n---\n${text}`;
            if (fileUrls.length > 0) {
                messageText += `\n\n–§–∞–π–ª—ã —É—Ç–æ—á–Ω–µ–Ω–∏–π:`;
                fileUrls.forEach((fileUrl) => {
                    const file = extractFileName(fileUrl)
                    messageText += `\n<a href="${fileUrl}">${file}</a>`;
                });
            }

            await bot.telegram.sendMessage(id, messageText, {
                parse_mode: 'HTML',
                reply_markup: Markup.inlineKeyboard([
                    Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ', `clarify_${application._id}`)
                ]).resize().reply_markup
            });

            res.status(200).send('Message sent successfully');
        } catch (e) {
            console.log("clarifications:", e);
            res.status(500).send('Error processing request');
        }
    });
}
